// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/KoNekoD/td/bin"
	"github.com/KoNekoD/td/tdjson"
	"github.com/KoNekoD/td/tdp"
	"github.com/KoNekoD/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChatRevenueWithdrawalStatePending represents TL type `chatRevenueWithdrawalStatePending#5f5cb5b3`.
type ChatRevenueWithdrawalStatePending struct {
}

// ChatRevenueWithdrawalStatePendingTypeID is TL type id of ChatRevenueWithdrawalStatePending.
const ChatRevenueWithdrawalStatePendingTypeID = 0x5f5cb5b3

// construct implements constructor of ChatRevenueWithdrawalStateClass.
func (c ChatRevenueWithdrawalStatePending) construct() ChatRevenueWithdrawalStateClass { return &c }

// Ensuring interfaces in compile-time for ChatRevenueWithdrawalStatePending.
var (
	_ bin.Encoder     = &ChatRevenueWithdrawalStatePending{}
	_ bin.Decoder     = &ChatRevenueWithdrawalStatePending{}
	_ bin.BareEncoder = &ChatRevenueWithdrawalStatePending{}
	_ bin.BareDecoder = &ChatRevenueWithdrawalStatePending{}

	_ ChatRevenueWithdrawalStateClass = &ChatRevenueWithdrawalStatePending{}
)

func (c *ChatRevenueWithdrawalStatePending) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatRevenueWithdrawalStatePending) String() string {
	if c == nil {
		return "ChatRevenueWithdrawalStatePending(nil)"
	}
	type Alias ChatRevenueWithdrawalStatePending
	return fmt.Sprintf("ChatRevenueWithdrawalStatePending%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatRevenueWithdrawalStatePending) TypeID() uint32 {
	return ChatRevenueWithdrawalStatePendingTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatRevenueWithdrawalStatePending) TypeName() string {
	return "chatRevenueWithdrawalStatePending"
}

// TypeInfo returns info about TL type.
func (c *ChatRevenueWithdrawalStatePending) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatRevenueWithdrawalStatePending",
		ID:   ChatRevenueWithdrawalStatePendingTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatRevenueWithdrawalStatePending) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStatePending#5f5cb5b3 as nil")
	}
	b.PutID(ChatRevenueWithdrawalStatePendingTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatRevenueWithdrawalStatePending) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStatePending#5f5cb5b3 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatRevenueWithdrawalStatePending) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStatePending#5f5cb5b3 to nil")
	}
	if err := b.ConsumeID(ChatRevenueWithdrawalStatePendingTypeID); err != nil {
		return fmt.Errorf("unable to decode chatRevenueWithdrawalStatePending#5f5cb5b3: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatRevenueWithdrawalStatePending) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStatePending#5f5cb5b3 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatRevenueWithdrawalStatePending) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStatePending#5f5cb5b3 as nil")
	}
	b.ObjStart()
	b.PutID("chatRevenueWithdrawalStatePending")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatRevenueWithdrawalStatePending) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStatePending#5f5cb5b3 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatRevenueWithdrawalStatePending"); err != nil {
				return fmt.Errorf("unable to decode chatRevenueWithdrawalStatePending#5f5cb5b3: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatRevenueWithdrawalStateCompleted represents TL type `chatRevenueWithdrawalStateCompleted#e61ffe44`.
type ChatRevenueWithdrawalStateCompleted struct {
	// Point in time (Unix timestamp) when the withdrawal was completed
	Date int32
	// The URL where the withdrawal transaction can be viewed
	URL string
}

// ChatRevenueWithdrawalStateCompletedTypeID is TL type id of ChatRevenueWithdrawalStateCompleted.
const ChatRevenueWithdrawalStateCompletedTypeID = 0xe61ffe44

// construct implements constructor of ChatRevenueWithdrawalStateClass.
func (c ChatRevenueWithdrawalStateCompleted) construct() ChatRevenueWithdrawalStateClass { return &c }

// Ensuring interfaces in compile-time for ChatRevenueWithdrawalStateCompleted.
var (
	_ bin.Encoder     = &ChatRevenueWithdrawalStateCompleted{}
	_ bin.Decoder     = &ChatRevenueWithdrawalStateCompleted{}
	_ bin.BareEncoder = &ChatRevenueWithdrawalStateCompleted{}
	_ bin.BareDecoder = &ChatRevenueWithdrawalStateCompleted{}

	_ ChatRevenueWithdrawalStateClass = &ChatRevenueWithdrawalStateCompleted{}
)

func (c *ChatRevenueWithdrawalStateCompleted) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.Date == 0) {
		return false
	}
	if !(c.URL == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatRevenueWithdrawalStateCompleted) String() string {
	if c == nil {
		return "ChatRevenueWithdrawalStateCompleted(nil)"
	}
	type Alias ChatRevenueWithdrawalStateCompleted
	return fmt.Sprintf("ChatRevenueWithdrawalStateCompleted%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatRevenueWithdrawalStateCompleted) TypeID() uint32 {
	return ChatRevenueWithdrawalStateCompletedTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatRevenueWithdrawalStateCompleted) TypeName() string {
	return "chatRevenueWithdrawalStateCompleted"
}

// TypeInfo returns info about TL type.
func (c *ChatRevenueWithdrawalStateCompleted) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatRevenueWithdrawalStateCompleted",
		ID:   ChatRevenueWithdrawalStateCompletedTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Date",
			SchemaName: "date",
		},
		{
			Name:       "URL",
			SchemaName: "url",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatRevenueWithdrawalStateCompleted) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStateCompleted#e61ffe44 as nil")
	}
	b.PutID(ChatRevenueWithdrawalStateCompletedTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatRevenueWithdrawalStateCompleted) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStateCompleted#e61ffe44 as nil")
	}
	b.PutInt32(c.Date)
	b.PutString(c.URL)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatRevenueWithdrawalStateCompleted) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStateCompleted#e61ffe44 to nil")
	}
	if err := b.ConsumeID(ChatRevenueWithdrawalStateCompletedTypeID); err != nil {
		return fmt.Errorf("unable to decode chatRevenueWithdrawalStateCompleted#e61ffe44: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatRevenueWithdrawalStateCompleted) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStateCompleted#e61ffe44 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatRevenueWithdrawalStateCompleted#e61ffe44: field date: %w", err)
		}
		c.Date = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode chatRevenueWithdrawalStateCompleted#e61ffe44: field url: %w", err)
		}
		c.URL = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatRevenueWithdrawalStateCompleted) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStateCompleted#e61ffe44 as nil")
	}
	b.ObjStart()
	b.PutID("chatRevenueWithdrawalStateCompleted")
	b.Comma()
	b.FieldStart("date")
	b.PutInt32(c.Date)
	b.Comma()
	b.FieldStart("url")
	b.PutString(c.URL)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatRevenueWithdrawalStateCompleted) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStateCompleted#e61ffe44 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatRevenueWithdrawalStateCompleted"); err != nil {
				return fmt.Errorf("unable to decode chatRevenueWithdrawalStateCompleted#e61ffe44: %w", err)
			}
		case "date":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode chatRevenueWithdrawalStateCompleted#e61ffe44: field date: %w", err)
			}
			c.Date = value
		case "url":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode chatRevenueWithdrawalStateCompleted#e61ffe44: field url: %w", err)
			}
			c.URL = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetDate returns value of Date field.
func (c *ChatRevenueWithdrawalStateCompleted) GetDate() (value int32) {
	if c == nil {
		return
	}
	return c.Date
}

// GetURL returns value of URL field.
func (c *ChatRevenueWithdrawalStateCompleted) GetURL() (value string) {
	if c == nil {
		return
	}
	return c.URL
}

// ChatRevenueWithdrawalStateFailed represents TL type `chatRevenueWithdrawalStateFailed#ee498044`.
type ChatRevenueWithdrawalStateFailed struct {
}

// ChatRevenueWithdrawalStateFailedTypeID is TL type id of ChatRevenueWithdrawalStateFailed.
const ChatRevenueWithdrawalStateFailedTypeID = 0xee498044

// construct implements constructor of ChatRevenueWithdrawalStateClass.
func (c ChatRevenueWithdrawalStateFailed) construct() ChatRevenueWithdrawalStateClass { return &c }

// Ensuring interfaces in compile-time for ChatRevenueWithdrawalStateFailed.
var (
	_ bin.Encoder     = &ChatRevenueWithdrawalStateFailed{}
	_ bin.Decoder     = &ChatRevenueWithdrawalStateFailed{}
	_ bin.BareEncoder = &ChatRevenueWithdrawalStateFailed{}
	_ bin.BareDecoder = &ChatRevenueWithdrawalStateFailed{}

	_ ChatRevenueWithdrawalStateClass = &ChatRevenueWithdrawalStateFailed{}
)

func (c *ChatRevenueWithdrawalStateFailed) Zero() bool {
	if c == nil {
		return true
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatRevenueWithdrawalStateFailed) String() string {
	if c == nil {
		return "ChatRevenueWithdrawalStateFailed(nil)"
	}
	type Alias ChatRevenueWithdrawalStateFailed
	return fmt.Sprintf("ChatRevenueWithdrawalStateFailed%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatRevenueWithdrawalStateFailed) TypeID() uint32 {
	return ChatRevenueWithdrawalStateFailedTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatRevenueWithdrawalStateFailed) TypeName() string {
	return "chatRevenueWithdrawalStateFailed"
}

// TypeInfo returns info about TL type.
func (c *ChatRevenueWithdrawalStateFailed) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatRevenueWithdrawalStateFailed",
		ID:   ChatRevenueWithdrawalStateFailedTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatRevenueWithdrawalStateFailed) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStateFailed#ee498044 as nil")
	}
	b.PutID(ChatRevenueWithdrawalStateFailedTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatRevenueWithdrawalStateFailed) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStateFailed#ee498044 as nil")
	}
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatRevenueWithdrawalStateFailed) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStateFailed#ee498044 to nil")
	}
	if err := b.ConsumeID(ChatRevenueWithdrawalStateFailedTypeID); err != nil {
		return fmt.Errorf("unable to decode chatRevenueWithdrawalStateFailed#ee498044: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatRevenueWithdrawalStateFailed) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStateFailed#ee498044 to nil")
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatRevenueWithdrawalStateFailed) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatRevenueWithdrawalStateFailed#ee498044 as nil")
	}
	b.ObjStart()
	b.PutID("chatRevenueWithdrawalStateFailed")
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatRevenueWithdrawalStateFailed) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatRevenueWithdrawalStateFailed#ee498044 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatRevenueWithdrawalStateFailed"); err != nil {
				return fmt.Errorf("unable to decode chatRevenueWithdrawalStateFailed#ee498044: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// ChatRevenueWithdrawalStateClassName is schema name of ChatRevenueWithdrawalStateClass.
const ChatRevenueWithdrawalStateClassName = "ChatRevenueWithdrawalState"

// ChatRevenueWithdrawalStateClass represents ChatRevenueWithdrawalState generic type.
//
// Example:
//
//	g, err := tdapi.DecodeChatRevenueWithdrawalState(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.ChatRevenueWithdrawalStatePending: // chatRevenueWithdrawalStatePending#5f5cb5b3
//	case *tdapi.ChatRevenueWithdrawalStateCompleted: // chatRevenueWithdrawalStateCompleted#e61ffe44
//	case *tdapi.ChatRevenueWithdrawalStateFailed: // chatRevenueWithdrawalStateFailed#ee498044
//	default: panic(v)
//	}
type ChatRevenueWithdrawalStateClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() ChatRevenueWithdrawalStateClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeChatRevenueWithdrawalState implements binary de-serialization for ChatRevenueWithdrawalStateClass.
func DecodeChatRevenueWithdrawalState(buf *bin.Buffer) (ChatRevenueWithdrawalStateClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case ChatRevenueWithdrawalStatePendingTypeID:
		// Decoding chatRevenueWithdrawalStatePending#5f5cb5b3.
		v := ChatRevenueWithdrawalStatePending{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatRevenueWithdrawalStateClass: %w", err)
		}
		return &v, nil
	case ChatRevenueWithdrawalStateCompletedTypeID:
		// Decoding chatRevenueWithdrawalStateCompleted#e61ffe44.
		v := ChatRevenueWithdrawalStateCompleted{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatRevenueWithdrawalStateClass: %w", err)
		}
		return &v, nil
	case ChatRevenueWithdrawalStateFailedTypeID:
		// Decoding chatRevenueWithdrawalStateFailed#ee498044.
		v := ChatRevenueWithdrawalStateFailed{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatRevenueWithdrawalStateClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChatRevenueWithdrawalStateClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONChatRevenueWithdrawalState implements binary de-serialization for ChatRevenueWithdrawalStateClass.
func DecodeTDLibJSONChatRevenueWithdrawalState(buf tdjson.Decoder) (ChatRevenueWithdrawalStateClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "chatRevenueWithdrawalStatePending":
		// Decoding chatRevenueWithdrawalStatePending#5f5cb5b3.
		v := ChatRevenueWithdrawalStatePending{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatRevenueWithdrawalStateClass: %w", err)
		}
		return &v, nil
	case "chatRevenueWithdrawalStateCompleted":
		// Decoding chatRevenueWithdrawalStateCompleted#e61ffe44.
		v := ChatRevenueWithdrawalStateCompleted{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatRevenueWithdrawalStateClass: %w", err)
		}
		return &v, nil
	case "chatRevenueWithdrawalStateFailed":
		// Decoding chatRevenueWithdrawalStateFailed#ee498044.
		v := ChatRevenueWithdrawalStateFailed{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode ChatRevenueWithdrawalStateClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode ChatRevenueWithdrawalStateClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// ChatRevenueWithdrawalState boxes the ChatRevenueWithdrawalStateClass providing a helper.
type ChatRevenueWithdrawalStateBox struct {
	ChatRevenueWithdrawalState ChatRevenueWithdrawalStateClass
}

// Decode implements bin.Decoder for ChatRevenueWithdrawalStateBox.
func (b *ChatRevenueWithdrawalStateBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChatRevenueWithdrawalStateBox to nil")
	}
	v, err := DecodeChatRevenueWithdrawalState(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChatRevenueWithdrawalState = v
	return nil
}

// Encode implements bin.Encode for ChatRevenueWithdrawalStateBox.
func (b *ChatRevenueWithdrawalStateBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.ChatRevenueWithdrawalState == nil {
		return fmt.Errorf("unable to encode ChatRevenueWithdrawalStateClass as nil")
	}
	return b.ChatRevenueWithdrawalState.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for ChatRevenueWithdrawalStateBox.
func (b *ChatRevenueWithdrawalStateBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode ChatRevenueWithdrawalStateBox to nil")
	}
	v, err := DecodeTDLibJSONChatRevenueWithdrawalState(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.ChatRevenueWithdrawalState = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for ChatRevenueWithdrawalStateBox.
func (b *ChatRevenueWithdrawalStateBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.ChatRevenueWithdrawalState == nil {
		return fmt.Errorf("unable to encode ChatRevenueWithdrawalStateClass as nil")
	}
	return b.ChatRevenueWithdrawalState.EncodeTDLibJSON(buf)
}
