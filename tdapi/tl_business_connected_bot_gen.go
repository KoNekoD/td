// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/KoNekoD/td/bin"
	"github.com/KoNekoD/td/tdjson"
	"github.com/KoNekoD/td/tdp"
	"github.com/KoNekoD/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// BusinessConnectedBot represents TL type `businessConnectedBot#ec50ead7`.
type BusinessConnectedBot struct {
	// User identifier of the bot
	BotUserID int64
	// Private chats that will be accessible to the bot
	Recipients BusinessRecipients
	// True, if the bot can send messages to the private chats; false otherwise
	CanReply bool
}

// BusinessConnectedBotTypeID is TL type id of BusinessConnectedBot.
const BusinessConnectedBotTypeID = 0xec50ead7

// Ensuring interfaces in compile-time for BusinessConnectedBot.
var (
	_ bin.Encoder     = &BusinessConnectedBot{}
	_ bin.Decoder     = &BusinessConnectedBot{}
	_ bin.BareEncoder = &BusinessConnectedBot{}
	_ bin.BareDecoder = &BusinessConnectedBot{}
)

func (b *BusinessConnectedBot) Zero() bool {
	if b == nil {
		return true
	}
	if !(b.BotUserID == 0) {
		return false
	}
	if !(b.Recipients.Zero()) {
		return false
	}
	if !(b.CanReply == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (b *BusinessConnectedBot) String() string {
	if b == nil {
		return "BusinessConnectedBot(nil)"
	}
	type Alias BusinessConnectedBot
	return fmt.Sprintf("BusinessConnectedBot%+v", Alias(*b))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*BusinessConnectedBot) TypeID() uint32 {
	return BusinessConnectedBotTypeID
}

// TypeName returns name of type in TL schema.
func (*BusinessConnectedBot) TypeName() string {
	return "businessConnectedBot"
}

// TypeInfo returns info about TL type.
func (b *BusinessConnectedBot) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "businessConnectedBot",
		ID:   BusinessConnectedBotTypeID,
	}
	if b == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
		{
			Name:       "Recipients",
			SchemaName: "recipients",
		},
		{
			Name:       "CanReply",
			SchemaName: "can_reply",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (b *BusinessConnectedBot) Encode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode businessConnectedBot#ec50ead7 as nil")
	}
	buf.PutID(BusinessConnectedBotTypeID)
	return b.EncodeBare(buf)
}

// EncodeBare implements bin.BareEncoder.
func (b *BusinessConnectedBot) EncodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't encode businessConnectedBot#ec50ead7 as nil")
	}
	buf.PutInt53(b.BotUserID)
	if err := b.Recipients.Encode(buf); err != nil {
		return fmt.Errorf("unable to encode businessConnectedBot#ec50ead7: field recipients: %w", err)
	}
	buf.PutBool(b.CanReply)
	return nil
}

// Decode implements bin.Decoder.
func (b *BusinessConnectedBot) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode businessConnectedBot#ec50ead7 to nil")
	}
	if err := buf.ConsumeID(BusinessConnectedBotTypeID); err != nil {
		return fmt.Errorf("unable to decode businessConnectedBot#ec50ead7: %w", err)
	}
	return b.DecodeBare(buf)
}

// DecodeBare implements bin.BareDecoder.
func (b *BusinessConnectedBot) DecodeBare(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("can't decode businessConnectedBot#ec50ead7 to nil")
	}
	{
		value, err := buf.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode businessConnectedBot#ec50ead7: field bot_user_id: %w", err)
		}
		b.BotUserID = value
	}
	{
		if err := b.Recipients.Decode(buf); err != nil {
			return fmt.Errorf("unable to decode businessConnectedBot#ec50ead7: field recipients: %w", err)
		}
	}
	{
		value, err := buf.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode businessConnectedBot#ec50ead7: field can_reply: %w", err)
		}
		b.CanReply = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (b *BusinessConnectedBot) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil {
		return fmt.Errorf("can't encode businessConnectedBot#ec50ead7 as nil")
	}
	buf.ObjStart()
	buf.PutID("businessConnectedBot")
	buf.Comma()
	buf.FieldStart("bot_user_id")
	buf.PutInt53(b.BotUserID)
	buf.Comma()
	buf.FieldStart("recipients")
	if err := b.Recipients.EncodeTDLibJSON(buf); err != nil {
		return fmt.Errorf("unable to encode businessConnectedBot#ec50ead7: field recipients: %w", err)
	}
	buf.Comma()
	buf.FieldStart("can_reply")
	buf.PutBool(b.CanReply)
	buf.Comma()
	buf.StripComma()
	buf.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (b *BusinessConnectedBot) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("can't decode businessConnectedBot#ec50ead7 to nil")
	}

	return buf.Obj(func(buf tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := buf.ConsumeID("businessConnectedBot"); err != nil {
				return fmt.Errorf("unable to decode businessConnectedBot#ec50ead7: %w", err)
			}
		case "bot_user_id":
			value, err := buf.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode businessConnectedBot#ec50ead7: field bot_user_id: %w", err)
			}
			b.BotUserID = value
		case "recipients":
			if err := b.Recipients.DecodeTDLibJSON(buf); err != nil {
				return fmt.Errorf("unable to decode businessConnectedBot#ec50ead7: field recipients: %w", err)
			}
		case "can_reply":
			value, err := buf.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode businessConnectedBot#ec50ead7: field can_reply: %w", err)
			}
			b.CanReply = value
		default:
			return buf.Skip()
		}
		return nil
	})
}

// GetBotUserID returns value of BotUserID field.
func (b *BusinessConnectedBot) GetBotUserID() (value int64) {
	if b == nil {
		return
	}
	return b.BotUserID
}

// GetRecipients returns value of Recipients field.
func (b *BusinessConnectedBot) GetRecipients() (value BusinessRecipients) {
	if b == nil {
		return
	}
	return b.Recipients
}

// GetCanReply returns value of CanReply field.
func (b *BusinessConnectedBot) GetCanReply() (value bool) {
	if b == nil {
		return
	}
	return b.CanReply
}
