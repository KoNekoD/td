// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/KoNekoD/td/bin"
	"github.com/KoNekoD/td/tdjson"
	"github.com/KoNekoD/td/tdp"
	"github.com/KoNekoD/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// GetWebPagePreviewRequest represents TL type `getWebPagePreview#a850b8d8`.
type GetWebPagePreviewRequest struct {
	// Message text with formatting
	Text FormattedText
	// Options to be used for generation of the link preview; pass null to use default link
	// preview options
	LinkPreviewOptions LinkPreviewOptions
}

// GetWebPagePreviewRequestTypeID is TL type id of GetWebPagePreviewRequest.
const GetWebPagePreviewRequestTypeID = 0xa850b8d8

// Ensuring interfaces in compile-time for GetWebPagePreviewRequest.
var (
	_ bin.Encoder     = &GetWebPagePreviewRequest{}
	_ bin.Decoder     = &GetWebPagePreviewRequest{}
	_ bin.BareEncoder = &GetWebPagePreviewRequest{}
	_ bin.BareDecoder = &GetWebPagePreviewRequest{}
)

func (g *GetWebPagePreviewRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.Text.Zero()) {
		return false
	}
	if !(g.LinkPreviewOptions.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetWebPagePreviewRequest) String() string {
	if g == nil {
		return "GetWebPagePreviewRequest(nil)"
	}
	type Alias GetWebPagePreviewRequest
	return fmt.Sprintf("GetWebPagePreviewRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetWebPagePreviewRequest) TypeID() uint32 {
	return GetWebPagePreviewRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetWebPagePreviewRequest) TypeName() string {
	return "getWebPagePreview"
}

// TypeInfo returns info about TL type.
func (g *GetWebPagePreviewRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getWebPagePreview",
		ID:   GetWebPagePreviewRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Text",
			SchemaName: "text",
		},
		{
			Name:       "LinkPreviewOptions",
			SchemaName: "link_preview_options",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetWebPagePreviewRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getWebPagePreview#a850b8d8 as nil")
	}
	b.PutID(GetWebPagePreviewRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetWebPagePreviewRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getWebPagePreview#a850b8d8 as nil")
	}
	if err := g.Text.Encode(b); err != nil {
		return fmt.Errorf("unable to encode getWebPagePreview#a850b8d8: field text: %w", err)
	}
	if err := g.LinkPreviewOptions.Encode(b); err != nil {
		return fmt.Errorf("unable to encode getWebPagePreview#a850b8d8: field link_preview_options: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *GetWebPagePreviewRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getWebPagePreview#a850b8d8 to nil")
	}
	if err := b.ConsumeID(GetWebPagePreviewRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getWebPagePreview#a850b8d8: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetWebPagePreviewRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getWebPagePreview#a850b8d8 to nil")
	}
	{
		if err := g.Text.Decode(b); err != nil {
			return fmt.Errorf("unable to decode getWebPagePreview#a850b8d8: field text: %w", err)
		}
	}
	{
		if err := g.LinkPreviewOptions.Decode(b); err != nil {
			return fmt.Errorf("unable to decode getWebPagePreview#a850b8d8: field link_preview_options: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (g *GetWebPagePreviewRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if g == nil {
		return fmt.Errorf("can't encode getWebPagePreview#a850b8d8 as nil")
	}
	b.ObjStart()
	b.PutID("getWebPagePreview")
	b.Comma()
	b.FieldStart("text")
	if err := g.Text.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode getWebPagePreview#a850b8d8: field text: %w", err)
	}
	b.Comma()
	b.FieldStart("link_preview_options")
	if err := g.LinkPreviewOptions.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode getWebPagePreview#a850b8d8: field link_preview_options: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (g *GetWebPagePreviewRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if g == nil {
		return fmt.Errorf("can't decode getWebPagePreview#a850b8d8 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("getWebPagePreview"); err != nil {
				return fmt.Errorf("unable to decode getWebPagePreview#a850b8d8: %w", err)
			}
		case "text":
			if err := g.Text.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode getWebPagePreview#a850b8d8: field text: %w", err)
			}
		case "link_preview_options":
			if err := g.LinkPreviewOptions.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode getWebPagePreview#a850b8d8: field link_preview_options: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetText returns value of Text field.
func (g *GetWebPagePreviewRequest) GetText() (value FormattedText) {
	if g == nil {
		return
	}
	return g.Text
}

// GetLinkPreviewOptions returns value of LinkPreviewOptions field.
func (g *GetWebPagePreviewRequest) GetLinkPreviewOptions() (value LinkPreviewOptions) {
	if g == nil {
		return
	}
	return g.LinkPreviewOptions
}

// GetWebPagePreview invokes method getWebPagePreview#a850b8d8 returning error if any.
func (c *Client) GetWebPagePreview(ctx context.Context, request *GetWebPagePreviewRequest) (*WebPage, error) {
	var result WebPage

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
